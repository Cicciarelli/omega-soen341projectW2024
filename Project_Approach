**Project Approach and Technology**

1. Project Overview
 
 1.1 Project Objectives

  The goal of this project is to create a web application prototype or base for a car rental project. Users of this application can create accounts,
  browse vehicles, make reservations and modify/delete account or reservation specifics. This needs to be created using GitHub as a repository for our
  code and documentation.

 
 1.2 Scope

  This project will be a functioning web page. Users will be able to sign in or create a new account. With an account, users will to make a reservation. If 
  a user has an existing reservation, they will be able to view, modify and delete that reservation. If a user has an account, they will be able to view,
  modify and delete their account. They will be able to change passwords and change usernames (if the new username does not already exist).

  The website itself will consist of a home page with a list of available vehicles. Filters will be available to narrow down a users search. On the home
  page, there will be brief details on the cars. Selecting a car will bring the user to a new page with more details on the car, as well as the option to
  reserve the car. A database will store users, cars and reservations.

  System administators will be able to view, modify, and delete any existing user. They will be available to view, modify, and delete any existing
  reservation. They will also be available to view, modify and delete any existing car. System administrators will also be able to add new cars, new users
  and new reservations.

  Users will be able to review and rate the service, (ratings will also be stored in a database), and select a pickup location for certain cars.
 
 1.3 Target Audience
 
  We are looking to have two target audiences. Firstly, we are looking to target travellers to Montreal who are in need of a car to get around while they
  are here. Secondly, we are looking to target either travellers or locals who want to rent a luxury car for a shorter period of time. Of course, any 
  user must be 23 years old or older to rent a car.
 
 2. Project Approach
 
 2.1 Development Methodology
- Choose a development methodology (e.g., Agile, Waterfall) and
justify the selection based on project requirements.
For our development methodology, we will be going for Agile methodolgy. This is a obvious decision, as it is our team's first large scale
project using Github which means we will most certainly encounters issues and bugs along the way.
With agile methodology, bugs, issues and changes are taken into consideration when planning and carrying out a project. This is how development
project take course. It would be unfeasable to assume one course of action and to try to stay on the same track the whole way.


 2.2 Project Timeline
 
 Refer to wiki for full details on project timeline.
 
 2.3 Collaboration and Communication

 Our team will be using Discord for the majority of our communication and using Github for the code and the seperation of tasks. We will also be meeting in person at least once per week. On Discord, calls and messages will be used.
 
 3. Technology Stack
 
 3.1 Backend Frameworks
 
 3.1.1 Spring Framework
 
 Spring is a java-based framework thats been around for over 20 years. The primary function of spring is to simplify the setup and configuration process,
 allowing users to focus more on the actual logic of the code rather than the syntax or setup process.

 Spring can potentially be a good option for us to use because of the community support. Despite Spring being around for a long time, its still one of the 
 most used frameworks out there. There are plenty of tutorials, guides, and videos online displaying Spring's features and how to use them. Spring seems to 
 be very easy to integrate to a project.
 
 Also, the fact that Spring is java-based is useful, as Java is a programming language that all of our team members are familiar with. Another useful 
 feature we can take advantage of with Spring is that it supports HTML, which will help us with the frontend work as well.

 Despite the support online, Spring is apparently difficult to learn and master. While we don't necessarily need to master Spring, if we're not able to
 take advantage of it's features, then it defeats the purpose of using it in the first place. Furthermore, it seems that it is very difficult to integrate
 databases with Spring, which is a major part of our project.

 To conclude Spring, its a viable option for us to use in our project. It's based in a language all of our group members are comfortable with, and can 
 support both fronted and backend. There is a huge community available for tutorials and questions, and it is very easy to integrate into a project. 
 Unfortunately, there are some downsides as well. Spring seems hard to learn, harder to master, and may cause issues for us when we try to integrate 
 databases to our project.
 
 3.1.2 Flask

Flask is a lightweight and versatile web development framework for Python. It is simple and easy to use for beginners which makes it a good option to create prototypes for smaller web sites.
Flask is simple to use and flexible making it easy for beginners to use and create a website from it during their first-time    use. It is also a minimalistic web development frame when it comes to its web design. Flask comes with its own pros and cons that can change how you plan to create your website. A great thing about Flask is that it has a large and active community that and can help with any questions or difficulties that you may encounter while using Flask. There are a lot of tutorials on how to use flask on YouTube as well as websites to teach the different functions that are offered by flask. Flask can also be integrated with Python which is our backend language of choice. This can give us access to python libraries and framework. These libraries and frameworks give us access to some features that can simplify our workload for the creation of our website such as database management.
maintenance.

Flask's has more of a minimalist design while also containing beginner-friendly API which make it easy to learn and use for  beginners and first-time users. In Flask, you can access libraries of different back-end languages such as python which offers a lot more options for website design, management, and creation. Flask also has a small codebase compared to other frameworks which makes it more dependable than others and great for creating web site prototypes quickly as well as for making quick overhauls.

Flask's takes a more minimalistic approach to web development, which means that it lacks some features that other web development frames might have. Furthermore, compared to a more fully featured frameworks that uses Python like Django, Flask requires more manual setup such as having to connecte to python libraries for tasks such as database management and user authentication.
 
 3.1.3 Struts 
 
Description:  Struts is an open-source MVC framework for Java EE web applications, offering a clear separation of concerns (Model-View-Controller), extensive view tag libraries, and form validation capabilities.  

Rationale:  The choice of Struts is supported by its strong MVC architecture, aiding in the development of scalable, maintainable applications. Its user interface capabilities, through an extensive tag library, and features like form validation and internationalization, ensure the creation of responsive, cross-browser compatible web applications.  

Qualitative Assessment:  

Strengths: 
- MVC architecture promotes manageability and scalability. 
- Extensive tag library enhances user interface development. 
- Built-in form validation and internationalization support. 

Weaknesses:  
- Steep learning curve for newcomers. 
- Sometimes perceived as outdated compared to newer frameworks. 

Use Cases:  Ideal for enterprise and form-heavy applications requiring robust, scalable solutions. Suitable for applications needing a high degree of customization. 

All and all Struts is probably not an optimal framework for this project because of the steep learning curve and since we wonâ€™t be properly taking advantage of its strengths due to the short time span of the project.

 3.1.4 Pyramid
 
Description: Pyramid is a backend framework written in Python. Its primary goal is to make it easier to create web applications. It is designed to be flexible and minimalistic.

Rationale: Pyramid is a good framework to use because it is a very minimalistic and flexible web framework that prioritizes simplicity, scalability and ease of use. It allows developers to build with only the features needed. It is very easy to learn and adapt to it. Pyramid  is currently  used by Mozilla and Yelp.

Qualitative Assessment:
     - Strength:
	Highly extensible. It has access to a lot of add-ons and extensions.
Flexible URL mapping system which makes it easier to create clean and intuitive URLs
It has many built-in features, such as templating engine and a request object
More flexible than other frameworks

  - Weaknesses:
Few pre-built libraries 
Relatively new and has a smaller developer community

3.2 Frontend Frameworks

3.3.1 Django

- Description: Django is a Python web framework following the Model View Controller design pattern.
  It implements frontend and backend features.
- Rationale: The already existing features seen in strengths will save us
  development time compared to if we used a framework without them.
  Using Python will also save us development time due to its ease of use.
- Qualitative Assessment:
  - Strengths:
    - Django has common features already implemented.
      These include CRUD operations we plan to use for many of the objects in our project.
    - Django implements an object relational mapper which lets us do operations on our database using only Python code.
      This might eliminate the need for writing SQL queries.
    - Django comes with built in security features. One example is preventing sql injection.
    - Django is 18 years old and has had time to mature and develop a community.
    - Django offers templates which can generate web pages.
  - Weaknesses:
    - Python could be considered a slow language compared to other common languages like c++ or Java.
      This could hurt our performance if it becomes the bottleneck.
    - If any of the already implemented features does not function how we want them to,
      extending them may be more difficult than creating them from scratch.
  - Use Cases:
    - CRUD operations will be necessary for some objects in our project. Django implements this.
    - The ORM will be used to do operations on our database.
 
3.2.2 Framework React.js
 
React.js is a JavaScript library for building interactive UIs (User Interface), and it was initially developed at Facebook to fix code maintainability issues. It utilized what are called "components" to make applications. These components are pieces of the UI that are fully programmable and which range from a simple button to the entire page.

First and foremost, many applications that people use in their daily lives are developed with React: notably, we have Facebook, Instragram, Netflix, NY Times, Yahoo! and even Khan Academy.
Secondly, React.js is considered the best frontend framework by many articles online, as well as reviewers who said they are more likely to re-use React.js than any other frameworks.
The components aforementioned are easily reusabable and the integrated React hooks makes writing them easy.
It should also be mentioned that React.js has an incredibly large support community as it is used for the largest social media apps.
 
In other words, React.js comes with very practical tools, such as components and hooks. The large community support is a key part of considering a framework as any problem we encounter might have already been solved.
However, React.js has a steep learning curve and it could be difficult for those with little to no knowledge of javascript to learn how to use it.
In terms of use cases, React.js is a perfect match for a single-page web application (take Facebook for example).
 
 3.2.3 Angular
The frontend framework called Angular is an open-source framework which uses Javascript/Typescript. It is currently maintained by Google.
- Rationale:
  - Justification for choosing Framework Z.
Angular is currently maintained by Google, the most powerful company in the world. It is used by them, by Nike, Forbes, Sony and many more.
This means that it is no joke. Such a large company maintaining this framework means it is reliable, powerful and has a very large community.
Also, its primary purpose is to develop single-page applications, which is what we are working on.

  - Strengths:
	It have customizable components, relatively easy to learn, and suited for modern application development.
  - Weaknesses:
	JavaScript might not be the best pick for single-page applications that require modularity and testability.
	However, Angular has both a Javascript framework and a Typescript framework.
  - Use Cases:
	As indicated above, Angular is used primarily for single-page web development to provide a standard structure for developers to work with.
	It also enables developers to create large applications that are easily maintainable.
 
 4. Integration and Interoperability
 
 4.1 Backend-Frontend Integration

To choose the correct backend and frontend frameworks, we need to understand what our requirements are for this project.
We are going to be making a web application which requires efficiency and perfomance, as well as a good framework that contains features that we are going to use.
In this case, we will be using Django for the backend, and React for the frontend. Both of these frameworks provide us developers with the proper tools, as well as an ease of intergration necessary for this project.
 
 4.2 Third-Party Services
 
 The only third-party service we will use is an online database service. Right now, the application we are considering is mySQL or SQLite, which we will use to store
 usernames, passwords, users, cars, reservations and ratings.
 
 5. Security Considerations

 We will use a SQL database to securely store the client data such as emails and passwords. We will also implement HTTPS to encrypt the data between the user and the website
 
 6. Conclusion

In conclusion, our team has decided to take an agile methodology approach to this project, as we may and most certainly will encounters bugs/impasses that will necessitate us to change our course of action as we go.
With this in mind, we will integrate Django and React.js for our technology stacks because of their ease of use, their very large community support, their features such as modularity and testability.

